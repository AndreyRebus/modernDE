import json
import pathlib
import re
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# ---------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
OUT = pathlib.Path("data/splashes")
OUT.mkdir(parents=True, exist_ok=True)

# –õ–æ–∫–∞–ª—å –¥–ª—è –∏–º—ë–Ω —á–µ–º–ø–∏–æ–Ω–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ (ru_RU -> —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞; en_US -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)
LOCALE = "en_US"

# –ü–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ (—á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ —É–¥–∞–ª–∏—Ç—å —á—É–∂–∏–µ —Ñ–∞–π–ª—ã)
SAFE_DELETE_PATTERN = re.compile(r"^[A-Za-z][A-Za-z0-9]+_\d+\.jpg$")

TIMEOUT = 20
# -------------------------------

def get_session() -> requests.Session:
    s = requests.Session()
    retries = Retry(
        total=5,
        backoff_factor=0.5,
        status_forcelist=(429, 500, 502, 503, 504),
        allowed_methods=frozenset(["GET", "HEAD"]),
        raise_on_status=False,
    )
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.headers.update({"User-Agent": "lol-splash-sync/1.0"})
    return s

def latest_version(session: requests.Session) -> str:
    r = session.get("https://ddragon.leagueoflegends.com/api/versions.json", timeout=TIMEOUT)
    r.raise_for_status()
    return r.json()[0]

def load_champions(session: requests.Session, ver: str) -> dict:
    r = session.get(
        f"https://ddragon.leagueoflegends.com/cdn/{ver}/data/{LOCALE}/champion.json",
        timeout=TIMEOUT,
    )
    r.raise_for_status()
    return r.json()["data"]

def load_champion_detail(session: requests.Session, ver: str, champ_key: str) -> dict:
    r = session.get(
        f"https://ddragon.leagueoflegends.com/cdn/{ver}/data/{LOCALE}/champion/{champ_key}.json",
        timeout=TIMEOUT,
    )
    r.raise_for_status()
    return r.json()["data"][champ_key]

def splash_url(champ_key: str, skin_num: int) -> str:
    # URL –±–µ–∑ –≤–µ—Ä—Å–∏–∏ ‚Äî —É —Å–ø–ª—ç—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—É—Ç—å
    return f"https://ddragon.leagueoflegends.com/cdn/img/champion/splash/{champ_key}_{skin_num}.jpg"

def needs_update(session: requests.Session, file_path: pathlib.Path, url: str) -> bool:
    """–ù—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª:
       - —Ñ–∞–π–ª–∞ –Ω–µ—Ç
       - –ª–∏–±–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä –æ—Ç Content-Length –Ω–∞ CDN (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    """
    if not file_path.exists():
        return True
    try:
        h = session.head(url, timeout=TIMEOUT)
        if h.status_code == 200:
            clen = h.headers.get("Content-Length")
            if clen is not None and file_path.stat().st_size != int(clen):
                return True
        # –µ—Å–ª–∏ HEAD –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –±–µ–∑ Content-Length ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
    except requests.RequestException:
        pass
    return False

def main():
    session = get_session()

    ver = latest_version(session)
    champs = load_champions(session, ver)

    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–ª–æ–≤–∞—Ä—å "–ò–º—è —á–µ–º–ø–∏–æ–Ω–∞ -> —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π"
    expected_files = set()
    index_dict: dict[str, list[str]] = {}

    print(f"–ò—Å–ø–æ–ª—å–∑—É—é –≤–µ—Ä—Å–∏—é DDragon: {ver}")

    for champ_key in champs:
        detail = load_champion_detail(session, ver, champ_key)
        champ_name = detail["name"]  # –∏–º—è —á–µ–º–ø–∏–æ–Ω–∞ –ø–æ –ª–æ–∫–∞–ª–∏
        paths_for_champ = []

        for skin in detail["skins"]:
            num = skin["num"]
            url = splash_url(champ_key, num)
            fname = OUT / f"{champ_key}_{num}.jpg"

            # –°–∫–∞—á–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if needs_update(session, fname, url):
                try:
                    r = session.get(url, timeout=TIMEOUT)
                    if r.status_code == 200 and r.content:
                        fname.write_bytes(r.content)
                        action = "ADD" if not fname.exists() else "UPDATE"  # (–ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ exists() –≤—Å–µ–≥–¥–∞ True)
                        # –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
                    print(f"‚úî {fname.name} ‚Äî —Å–∫–∞—á–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except requests.RequestException as e:
                    print(f"‚úñ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {url}: {e}")
                    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ expected_files / index_dict
                    continue
            else:
                # —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
                pass

            expected_files.add(fname.resolve())
            paths_for_champ.append(str(fname.resolve()))

        index_dict[champ_name] = paths_for_champ

    # –£–¥–∞–ª—è–µ–º ¬´–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ¬ª *.jpg, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
    deleted = 0
    for p in OUT.glob("*.jpg"):
        # —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –ù–ï –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—à —Å–ø–ª—ç—à
        if p.resolve() not in expected_files and SAFE_DELETE_PATTERN.match(p.name):
            try:
                p.unlink()
                deleted += 1
                print(f"üóë –£–¥–∞–ª—ë–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: {p.name}")
            except OSError as e:
                print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {p}: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å (–∏–Ω–¥–µ–∫—Å)
    index_path = OUT / "index.json"
    index_path.write_text(json.dumps(index_dict, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"\n–ì–æ—Ç–æ–≤–æ. –£–¥–∞–ª–µ–Ω–æ: {deleted}. –ò–Ω–¥–µ–∫—Å: {index_path}")

if __name__ == "__main__":
    main()
