import io
import json
import os
import pathlib
import re
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# ---------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
OUT = pathlib.Path("data/splashes")
OUT.mkdir(parents=True, exist_ok=True)

# –õ–æ–∫–∞–ª—å (en_US ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ: –∫–ª—é—á–∏ —á–µ–º–ø–∏–æ–Ω–æ–≤ –∏ –∏–º–µ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ñ–∞–π–ª–∞–º–∏)
LOCALE = "en_US"

# –ö–∞–∫ –ø–∏—Å–∞—Ç—å –ø—É—Ç–∏ –≤ index.json:
#   - "relative" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä "Aatrox_0.jpg"
#   - "absolute": –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º MOUNT_PREFIX (–¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
INDEX_MODE = os.getenv("SPLASH_INDEX_MODE", "relative").strip().lower()  # relative | absolute
MOUNT_PREFIX = os.getenv("SPLASH_MOUNT_PREFIX", "/app/data/splashes").rstrip("/")

# –ü–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–º—ë–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ¬´–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö¬ª —Ñ–∞–π–ª–æ–≤
SAFE_DELETE_PATTERN = re.compile(r"^[A-Za-z][A-Za-z0-9]+_\d+\.jpg$")

TIMEOUT = 20
MAX_IMAGE_BYTES = 10 * 1024 * 1024  # 10 –ú–ë
# -------------------------------

def to_index_entry(local_file: pathlib.Path) -> str:
    """–ö–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –ø—É—Ç—å –≤ index.json."""
    name = local_file.name
    if INDEX_MODE == "absolute":
        return f"{MOUNT_PREFIX}/{name}"
    return name  # relative

def get_session() -> requests.Session:
    s = requests.Session()
    retries = Retry(
        total=5,
        backoff_factor=0.5,
        status_forcelist=(429, 500, 502, 503, 504),
        allowed_methods=frozenset(["GET", "HEAD"]),
        raise_on_status=False,
    )
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.headers.update({"User-Agent": "lol-splash-sync/1.0"})
    return s

def latest_version(session: requests.Session) -> str:
    r = session.get("https://ddragon.leagueoflegends.com/api/versions.json", timeout=TIMEOUT)
    r.raise_for_status()
    return r.json()[0]

def load_champions(session: requests.Session, ver: str) -> dict:
    r = session.get(
        f"https://ddragon.leagueoflegends.com/cdn/{ver}/data/{LOCALE}/champion.json",
        timeout=TIMEOUT,
    )
    r.raise_for_status()
    return r.json()["data"]

def load_champion_detail(session: requests.Session, ver: str, champ_key: str) -> dict:
    r = session.get(
        f"https://ddragon.leagueoflegends.com/cdn/{ver}/data/{LOCALE}/champion/{champ_key}.json",
        timeout=TIMEOUT,
    )
    r.raise_for_status()
    return r.json()["data"][champ_key]

def splash_url(champ_key: str, skin_num: int) -> str:
    return f"https://ddragon.leagueoflegends.com/cdn/img/champion/splash/{champ_key}_{skin_num}.jpg"

# ---------- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞ (ETag/Last-Modified) ----------
def meta_path(fp: pathlib.Path) -> pathlib.Path:
    return fp.with_name(fp.name + ".meta")

def read_meta(fp: pathlib.Path) -> dict | None:
    p = meta_path(fp)
    if p.exists():
        try:
            return json.loads(p.read_text(encoding="utf-8"))
        except Exception:
            return None
    return None

def write_meta(fp: pathlib.Path, headers: requests.structures.CaseInsensitiveDict, fallback_len: int) -> None:
    data = {
        "etag": headers.get("ETag"),
        "content_length": int(headers.get("Content-Length") or fallback_len or 0),
        "last_modified": headers.get("Last-Modified"),
    }
    meta_path(fp).write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

def needs_update(session: requests.Session, file_path: pathlib.Path, url: str) -> bool:
    if not file_path.exists():
        return True

    local_meta = read_meta(file_path)

    try:
        h = session.head(url, timeout=TIMEOUT)
        if h.status_code == 200:
            etag = h.headers.get("ETag")
            clen = h.headers.get("Content-Length")
            last_mod = h.headers.get("Last-Modified")

            if local_meta:
                if etag and etag == local_meta.get("etag"):
                    return False
                if clen and int(clen) == int(local_meta.get("content_length") or -1):
                    return False
                if last_mod and last_mod == local_meta.get("last_modified"):
                    return False
            return True
    except requests.RequestException:
        pass
    return False
# ----------------------------------------------------------------

# ---------- –°–∂–∞—Ç–∏–µ JPEG ----------
def compress_jpeg_to_max_bytes(data: bytes, max_bytes: int = MAX_IMAGE_BYTES) -> tuple[bytes, bool]:
    if len(data) <= max_bytes:
        return data, False

    try:
        from PIL import Image
    except ImportError as e:
        raise RuntimeError("–î–ª—è —Å–∂–∞—Ç–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è Pillow: pip install pillow") from e

    img = Image.open(io.BytesIO(data))
    if img.mode not in ("RGB", "L"):
        img = img.convert("RGB")

    def save_with_quality(im, q: int) -> bytes:
        buf = io.BytesIO()
        im.save(
            buf,
            format="JPEG",
            quality=int(q),
            optimize=True,
            progressive=True,
            subsampling="4:2:0",
        )
        return buf.getvalue()

    # 1) –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    low, high = 40, 95
    best = None
    while low <= high:
        mid = (low + high) // 2
        candidate = save_with_quality(img, mid)
        if len(candidate) <= max_bytes:
            best = candidate
            low = mid + 1
        else:
            high = mid - 1

    if best:
        return best, True

    # 2) –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ + –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    from math import sqrt
    current = img
    ratio_guess = sqrt(max_bytes / len(data)) * 0.98
    if ratio_guess >= 1.0:
        ratio_guess = 0.95
    for _ in range(10):
        w, h = current.size
        nw, nh = max(1, int(w * ratio_guess)), max(1, int(h * ratio_guess))
        if (nw, nh) == current.size:
            nw, nh = max(1, w - 1), max(1, h - 1)
        current = current.resize((nw, nh), Image.LANCZOS)

        low, high = 40, 95
        best = None
        while low <= high:
            mid = (low + high) // 2
            candidate = save_with_quality(current, mid)
            if len(candidate) <= max_bytes:
                best = candidate
                low = mid + 1
            else:
                high = mid - 1
        if best:
            return best, True

        ratio_guess *= 0.9

    fallback = save_with_quality(current, 30)
    if len(fallback) > max_bytes:
        while len(fallback) > max_bytes and min(current.size) > 128:
            w, h = current.size
            current = current.resize((max(1, int(w * 0.85)), max(1, int(h * 0.85))), Image.LANCZOS)
            fallback = save_with_quality(current, 30)
    return fallback, True
# ----------------------------------------------------------------

def main():
    session = get_session()

    ver = latest_version(session)
    champs = load_champions(session, ver)

    # –ù–∞–±–æ—Ä –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏) –∏ –∏–Ω–¥–µ–∫—Å {champ_key -> [entry,...]}
    expected_files: set[pathlib.Path] = set()
    index_dict: dict[str, list[str]] = {}

    print(f"–ò—Å–ø–æ–ª—å–∑—É—é –≤–µ—Ä—Å–∏—é DDragon: {ver}")
    print(f"INDEX_MODE={INDEX_MODE}, MOUNT_PREFIX={MOUNT_PREFIX if INDEX_MODE=='absolute' else '(relative)'}")

    for champ_key in champs:  # champ_key: 'Aatrox', 'Ahri', ...
        detail = load_champion_detail(session, ver, champ_key)
        paths_for_champ: list[str] = []

        for skin in detail["skins"]:
            num = skin["num"]
            url = splash_url(champ_key, num)
            local = OUT / f"{champ_key}_{num}.jpg"

            if needs_update(session, local, url):
                existed = local.exists()
                try:
                    r = session.get(url, timeout=TIMEOUT)
                    if r.status_code == 200 and r.content:
                        data, compressed = compress_jpeg_to_max_bytes(r.content, MAX_IMAGE_BYTES)
                        local.write_bytes(data)
                        write_meta(local, r.headers, fallback_len=len(r.content))
                        size_mb = len(data) / (1024 * 1024)
                        action = "UPDATE" if existed else "ADD"
                        print(f"‚úî {local.name} ‚Äî {action}{' (—Å–∂–∞—Ç–æ)' if compressed else ''}, {size_mb:.2f} –ú–ë")
                    else:
                        print(f"‚úñ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {url}: —Å—Ç–∞—Ç—É—Å {r.status_code}")
                        continue
                except requests.RequestException as e:
                    print(f"‚úñ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {url}: {e}")
                    continue

            expected_files.add(local.resolve())
            paths_for_champ.append(to_index_entry(local))

        # –∫–ª—é—á ‚Äî champ_key (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –∞–Ω–≥–ª.)
        index_dict[champ_key] = paths_for_champ

    # –£–¥–∞–ª—è–µ–º ¬´–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ¬ª —Ñ–∞–π–ª—ã
    deleted = 0
    for p in OUT.glob("*.jpg"):
        if p.resolve() not in expected_files and SAFE_DELETE_PATTERN.match(p.name):
            try:
                p.unlink()
                mp = meta_path(p)
                if mp.exists():
                    mp.unlink(missing_ok=True)
                deleted += 1
                print(f"üóë –£–¥–∞–ª—ë–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: {p.name}")
            except OSError as e:
                print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {p}: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å (–∞—Ç–æ–º–∞—Ä–Ω–æ)
    index_path = OUT / "index.json"
    tmp_path = index_path.with_suffix(".json.tmp")
    tmp_path.write_text(json.dumps(index_dict, ensure_ascii=False, indent=2), encoding="utf-8")
    tmp_path.replace(index_path)

    print(f"\n–ì–æ—Ç–æ–≤–æ. –£–¥–∞–ª–µ–Ω–æ: {deleted}. –ò–Ω–¥–µ–∫—Å: {index_path}")
    if INDEX_MODE == "relative":
        print("–ò–Ω–¥–µ–∫—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ (–∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤). –í –±–æ—Ç–µ –æ–±—ä–µ–¥–∏–Ω—è–π—Ç–µ —Å SPLASH_DIR.")
    else:
        print(f"–ò–Ω–¥–µ–∫—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: {MOUNT_PREFIX}")

if __name__ == "__main__":
    main()
