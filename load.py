#!/usr/bin/env python3
"""
load_lol_matches_once_per_day.py
--------------------------------
–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ç—á–∏ League of Legends –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ Riot‚ÄëID —Ä–æ–≤–Ω–æ –∑–∞ –æ–¥–∏–Ω
–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–µ–Ω—å. –í—Å–µ —Å–µ—Ç–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã –∑–∞—â–∏—â–µ–Ω—ã, –æ—à–∏–±–∫–∏ –ø–µ—á–∞—Ç–∞—é—Ç—Å—è –≤ –ª–æ–≥ –∏ –Ω–µ
–ø—Ä–µ—Ä—ã–≤–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞.

–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* **safe_get** ‚Äî –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ `requests.get` —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Ç.‚ÄØ—á. 429),
  –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTTP‚Äë–æ—à–∏–±–æ–∫ –∏ –∑–∞—â—ë–ª–∫–æ–π –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.
* **logging** ‚Äî –µ–¥–∏–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞; –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–≤–æ–¥—è—Ç—Å—è —Å —Ç–∞–π–º‚Äë—Å—Ç–∞–º–ø–æ–º.
* –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ –¥–Ω—è (`match_ids == []`), —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –≤ Iceberg –ø—É—Å—Ç—ã–µ
  —Ñ–∞–π–ª—ã.
* –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã JSON‚Äë–æ—Ç–≤–µ—Ç–∞; –ø—Ä–æ–ø—É—Å–∫ ¬´–±–∏—Ç—ã—Ö¬ª –º–∞—Ç—á–µ–π –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è.
* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤. –ï—Å–ª–∏ –º–∞—Ç—á–µ–π –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ
  –ø–∏—à–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥.
"""

from __future__ import annotations

import io
import logging
import os
import re
import time
import datetime as dt
import urllib.parse
from typing import Any, Dict, List, Optional

import boto3
import pandas as pd
import requests
import urllib3
from dotenv import load_dotenv
from trino import dbapi
from trino.auth import BasicAuthentication

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s  %(levelname)-8s  %(message)s",
)

# –û—Ç–∫–ª—é—á–∞–µ–º InsecureRequestWarning –¥–ª—è self‚Äësigned TLS
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

META_COLS: List[str] = [
    "metadata.matchId",
    "info.gameCreation",
    "info.gameDuration",
    "info.gameMode",
    "info.queueId",
    "info.gameVersion",
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def safe_get(
    url: str,
    headers: Dict[str, str],
    *,
    max_retries: int = 3,
    backoff: float = 0.5,
) -> Optional[Dict[str, Any]]:
    """GET —Å JSON‚Äë–æ—Ç–≤–µ—Ç–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ 429 / 5xx.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –ª–∏–±–æ *None* (–µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã).
    """
    for attempt in range(max_retries):
        try:
            r = requests.get(url, headers=headers, timeout=10)
        except requests.RequestException as exc:
            logging.error("üí• %s ‚Äî network error: %s", url, exc)
            return None

        if r.status_code == 200:
            try:
                return r.json()
            except ValueError:
                logging.error("üí• %s ‚Äî invalid JSON: %.120s", url, r.text)
                return None

        if r.status_code == 429 and attempt < max_retries - 1:
            retry_after = int(r.headers.get("Retry-After", 1))
            time.sleep(retry_after + backoff)
            continue

        logging.error("üí• %s ‚Äî HTTP %s: %.120s", url, r.status_code, r.text)
        return None

    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ core ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def fetch_matches_once_per_day(
    riot_id: str,
    load_date: dt.date,
    *,
    api_key: str | None = None,
    platform_routing: str = "ru1",
    regional_routing: str = "europe",
    bucket_name: str = "test-s3test",
    s3_prefix: str = "stage_load_raw_data",
    aws_access_key_id: str | None = None,
    aws_secret_access_key: str | None = None,
    rate_delay: float = 1.2,
    trino_host: str = "5.129.208.115",
    trino_port: int = 8443,
    trino_user: str = "admin",
    trino_catalog: str = "iceberg",
    trino_schema: str = "lol_raw",
    trino_table: str = "data_api_mining",
    trino_password: str | None = None,
) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞ S3 –ª–∏–±–æ **None**, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ."""

    load_dotenv()

    # ‚îÄ‚îÄ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è / –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚îÄ‚îÄ
    aws_access_key_id = aws_access_key_id or os.getenv("AWS_ACCESS_KEY_ID")
    aws_secret_access_key = aws_secret_access_key or os.getenv("AWS_SECRET_ACCESS_KEY")
    if not (aws_access_key_id and aws_secret_access_key):
        raise ValueError("AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã.")

    api_key = api_key or os.getenv("RIOT_API_KEY")
    if not api_key:
        raise ValueError("RIOT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω.")

    trino_password = trino_password or os.getenv("TRINO_PASSWORD")
    if not trino_password:
        raise ValueError("TRINO_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω.")

    # ‚îÄ‚îÄ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 ‚îÄ‚îÄ
    session = boto3.session.Session(
        aws_access_key_id=aws_access_key_id,
        aws_secret_access_key=aws_secret_access_key,
        region_name="ru-central1",
    )
    s3 = session.resource("s3", endpoint_url="https://storage.yandexcloud.net")
    bucket = s3.Bucket(bucket_name)

    # ‚îÄ‚îÄ –∏–º—è –ø–æ–¥–ø–∞–ø–∫–∏ ‚îÄ‚îÄ
    folder_date = load_date.isoformat()
    riot_id_clean = re.sub(r"[\u2066-\u2069]", "", riot_id)
    safe_riot_id = riot_id_clean.replace("#", "_")
    s3_folder = f"{s3_prefix}/{folder_date}/{safe_riot_id}/"

    # ‚îÄ‚îÄ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–Ω–∏ ‚îÄ‚îÄ
    if any(obj.key.startswith(s3_folder) for obj in bucket.objects.filter(Prefix=s3_folder)):
        logging.info("‚è© %s: –¥–µ–Ω—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫.", folder_date)
        return None

    headers = {"X-Riot-Token": api_key}

    # ‚îÄ‚îÄ –ø–æ–ª—É—á–∞–µ–º PUUID ‚îÄ‚îÄ
    try:
        game_name, tagline = riot_id_clean.split("#", 1)
    except ValueError:
        raise ValueError("riot_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ GameName#Tagline")

    acct_url = (
        f"https://{regional_routing}.api.riotgames.com/riot/account/v1/accounts/by-riot-id/"
        f"{urllib.parse.quote(game_name)}/{urllib.parse.quote(tagline)}"
    )
    acct_resp = safe_get(acct_url, headers)
    puuid = acct_resp.get("puuid") if acct_resp else None
    if not puuid:
        logging.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PUUID –¥–ª—è %s", riot_id)
        return None

    # ‚îÄ‚îÄ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–Ω—è ‚îÄ‚îÄ
    start_ts = int(dt.datetime.combine(load_date, dt.time()).timestamp())
    end_ts = start_ts + 86400  # +1 –¥–µ–Ω—å

    ids_url = (
        f"https://{regional_routing}.api.riotgames.com/lol/match/v5/matches/by-puuid/{puuid}/ids"
        f"?startTime={start_ts}&endTime={end_ts}&count=100"
    )
    match_ids: List[str] = safe_get(ids_url, headers) or []

    if not match_ids:
        logging.info("‚ÑπÔ∏è  %s: —É %s –Ω–µ—Ç –º–∞—Ç—á–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.", folder_date, riot_id)
        return None

    # ‚îÄ‚îÄ —Å–∫–∞—á–∏–≤–∞–µ–º —Å–∞–º–∏ –º–∞—Ç—á–∏ ‚îÄ‚îÄ
    parts: List[Dict[str, Any]] = []
    for mid in match_ids:
        m = safe_get(
            f"https://{regional_routing}.api.riotgames.com/lol/match/v5/matches/{mid}",
            headers,
        )
        if not (m and "metadata" in m and "info" in m):
            logging.warning("‚ö†Ô∏è  %s: –ø—É—Å—Ç–æ–π/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Ç—á ‚Äî –ø—Ä–æ–ø—É—Å–∫", mid)
            continue

        df_m = pd.json_normalize(m)
        if not all(col in df_m.columns for col in META_COLS):
            logging.warning("‚ö†Ô∏è  %s: –Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫", mid)
            continue

        base = {c: df_m.at[0, c] for c in META_COLS}
        for p in m["info"]["participants"]:
            parts.append({**base, **{f"participant.{k}": v for k, v in p.items()}})

        time.sleep(rate_delay)

    if not parts:
        logging.info("‚ÑπÔ∏è  %s: –≤—Å–µ –º–∞—Ç—á–∏ –±—ã–ª–∏ –æ—Ç–±—Ä–æ—à–µ–Ω—ã (–±–∏—Ç—ã–µ).", folder_date)
        return None

    # ‚îÄ‚îÄ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ S3 ‚îÄ‚îÄ
    df = pd.DataFrame(parts)
    df["source_nickname"] = riot_id_clean

    buf = io.BytesIO()
    df.to_parquet(buf, index=False, compression="snappy")
    buf.seek(0)

    object_key = f"{s3_folder}{safe_riot_id}_{load_date}_{load_date}.parquet"
    s3.Object(bucket_name, object_key).upload_fileobj(buf)
    logging.info("‚úÖ %s: –∑–∞–≥—Ä—É–∂–µ–Ω–æ %s —Å—Ç—Ä–æ–∫ ‚Üí %s", folder_date, len(df), object_key)

    # ‚îÄ‚îÄ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ Iceberg ‚îÄ‚îÄ
    location_folder = f"s3://{bucket_name}/{s3_folder.rstrip('/') }"
    sql = f"""
        ALTER TABLE {trino_catalog}.{trino_schema}.{trino_table}
        EXECUTE add_files(
            location => '{location_folder}',
            format   => 'PARQUET'
        )
    """

    with dbapi.connect(
        host=trino_host,
        port=trino_port,
        user=trino_user,
        catalog=trino_catalog,
        schema=trino_schema,
        http_scheme="https",
        auth=BasicAuthentication(trino_user, trino_password),
        verify=False,
    ) as conn:
        cur = conn.cursor()
        cur.execute(sql.strip())
        cur.fetchall()
        

    return object_key

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    import time
    today = dt.date.today()
    start = today - dt.timedelta(weeks=2)
    end = today - dt.timedelta(days=1)

    total_days = (end - start).days + 1
    riot_ids = ["Monty Gard#RU1", "Breaksthesilence#RU1","2pilka#RU1","Gruntq#RU1","–®a–∑–∞–º#RU1","Prooaknor#RU1"]

    for riot in riot_ids:
        for i in range(total_days):
            day = start + dt.timedelta(days=i)
            try:
                fetch_matches_once_per_day(riot_id=riot, load_date=day)
            except Exception:
                logging.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–Ω–µ %s –¥–ª—è %s", day, riot)
            time.sleep(2)   
